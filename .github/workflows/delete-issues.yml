name: Elimina issue se contengono URL

on:
  issues:
    types: [opened, edited]

jobs:
  delete_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Controlla issue e prepara cancellazione
        id: check
        run: |
          # Estrae il node_id e il corpo della issue dal payload
          ISSUE_NODE_ID=$(jq -r '.issue.node_id' "$GITHUB_EVENT_PATH")
          ISSUE_BODY=$(jq -r '.issue.body' "$GITHUB_EVENT_PATH")
          echo "Issue Node ID: $ISSUE_NODE_ID"
          echo "Contenuto della issue: $ISSUE_BODY"
          
          # Se il corpo contiene almeno un URL (http:// o https://), allora imposta l'output
          if echo "$ISSUE_BODY" | grep -qE 'https?://'; then
            echo "URL rilevato nella issue. Procedo con la cancellazione."
            echo "::set-output name=node_id::$ISSUE_NODE_ID"
          else
            echo "Nessun URL rilevato: nessuna azione necessaria."
            exit 0
          fi

      - name: Elimina issue tramite GraphQL
        if: steps.check.outputs.node_id != ''
        env:
          # Nota: assicurati che il token usato abbia i permessi necessari;
          # se il token di default non basta, usa un PAT con ambito "repo" impostato in secrets.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NODE_ID: ${{ steps.check.outputs.node_id }}
        run: |
          echo "Elimino la issue con node ID: $ISSUE_NODE_ID"
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"mutation { deleteIssue(input: { issueId: \\\"$ISSUE_NODE_ID\\\" }) { clientMutationId } }\"}" \
            https://api.github.com/graphql)
          echo "Risposta: $RESPONSE"
